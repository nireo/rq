// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	opt "github.com/syndtr/goleveldb/leveldb/opt"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockStore) Ack(topic []byte, offset uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", topic, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockStoreMockRecorder) Ack(topic, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockStore)(nil).Ack), topic, offset)
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// GetNext mocks base method.
func (m *MockStore) GetNext(topic []byte) (*Value, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNext", topic)
	ret0, _ := ret[0].(*Value)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNext indicates an expected call of GetNext.
func (mr *MockStoreMockRecorder) GetNext(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNext", reflect.TypeOf((*MockStore)(nil).GetNext), topic)
}

// Insert mocks base method.
func (m *MockStore) Insert(topic []byte, val *Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", topic, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockStoreMockRecorder) Insert(topic, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockStore)(nil).Insert), topic, val)
}

// Nack mocks base method.
func (m *MockStore) Nack(topic []byte, offset uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nack", topic, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Nack indicates an expected call of Nack.
func (mr *MockStoreMockRecorder) Nack(topic, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nack", reflect.TypeOf((*MockStore)(nil).Nack), topic, offset)
}

// MockleveldbCommon is a mock of leveldbCommon interface.
type MockleveldbCommon struct {
	ctrl     *gomock.Controller
	recorder *MockleveldbCommonMockRecorder
}

// MockleveldbCommonMockRecorder is the mock recorder for MockleveldbCommon.
type MockleveldbCommonMockRecorder struct {
	mock *MockleveldbCommon
}

// NewMockleveldbCommon creates a new mock instance.
func NewMockleveldbCommon(ctrl *gomock.Controller) *MockleveldbCommon {
	mock := &MockleveldbCommon{ctrl: ctrl}
	mock.recorder = &MockleveldbCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockleveldbCommon) EXPECT() *MockleveldbCommonMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockleveldbCommon) Get(key []byte, ro *opt.ReadOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, ro)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockleveldbCommonMockRecorder) Get(key, ro interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockleveldbCommon)(nil).Get), key, ro)
}

// Has mocks base method.
func (m *MockleveldbCommon) Has(key []byte, ro *opt.ReadOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key, ro)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockleveldbCommonMockRecorder) Has(key, ro interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockleveldbCommon)(nil).Has), key, ro)
}

// Put mocks base method.
func (m *MockleveldbCommon) Put(key, value []byte, ro *opt.WriteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value, ro)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockleveldbCommonMockRecorder) Put(key, value, ro interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockleveldbCommon)(nil).Put), key, value, ro)
}
