// Code generated by MockGen. DO NOT EDIT.
// Source: broker.go

// Package broker is a generated GoMock package.
package broker

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	consumer "github.com/nireo/rq/internal/consumer"
	store "github.com/nireo/rq/internal/store"
)

// MockBroker is a mock of Broker interface.
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMockRecorder
}

// MockBrokerMockRecorder is the mock recorder for MockBroker.
type MockBrokerMockRecorder struct {
	mock *MockBroker
}

// NewMockBroker creates a new mock instance.
func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &MockBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroker) EXPECT() *MockBrokerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockBroker) Publish(topic string, value *store.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", topic, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockBrokerMockRecorder) Publish(topic, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockBroker)(nil).Publish), topic, value)
}

// Subscribe mocks base method.
func (m *MockBroker) Subscribe(topic string) *consumer.Consumer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic)
	ret0, _ := ret[0].(*consumer.Consumer)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockBrokerMockRecorder) Subscribe(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockBroker)(nil).Subscribe), topic)
}

// Unsubscribe mocks base method.
func (m *MockBroker) Unsubscribe(topic, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", topic, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockBrokerMockRecorder) Unsubscribe(topic, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockBroker)(nil).Unsubscribe), topic, id)
}
